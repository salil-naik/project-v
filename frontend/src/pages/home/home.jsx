import { useState } from "react";
import { Redirect } from "react-router-dom";
import { ethers } from "ethers";
import AES from "crypto-js/aes";

// material ui
import { Container, Grid } from "@material-ui/core";

// components
import { FancyButton } from "../../components/FancyButton/index";
import { CreateWalletModal } from "../../components/Modal/CreateWalletModal/index";
import { VerifyWalletModal } from "../../components/Modal/VerifyWalletModal/index";
import { ImportWallet } from "./ImportWallet/index";

// CSS
import style from "./home.module.scss";

export const Home = (props) => {
  const [createWalletState, setCreateWalletState] = useState(false);
  const [verificationModalState, setVerificationModalState] = useState(false);
  const [tooltip, setTooltip] = useState("Click to copy");
  // const [address, setAddress] = useState([]);

  // for import wallet
  const [importWalletState, setImportWalletState] = useState(false);

  // functions to open/close the modals

  const handleClose = () => {
    setCreateWalletState(false);
    setVerificationModalState(false);
    setImportWalletState(false);
  };

  const openVerificationModal = () => {
    setCreateWalletState(false);
    setVerificationModalState(true);
  };

  const openSeedPhraseModal = () => {
    setVerificationModalState(false);
    setCreateWalletState(true);
  };

  // important functions
  // To Create Wallet
  const createWallet = () => {
    setCreateWalletState(true);
    setTooltip("Click to copy");
    const wallet = ethers.Wallet.createRandom();
    props.setMnemonic(wallet.mnemonic.phrase);
  };

  // To Verify Wallet
  const setupWallet = (userMnemonic) => {
    // To fetch first address generated by Mneumonic
    const walletMnemonic = ethers.Wallet.fromMnemonic(
      userMnemonic,
      `m/44'/60'/0'/0/0`
    );

    props.setAddress((arr) => [
      ...arr,
      {
        address: walletMnemonic.address,
        privateKey: walletMnemonic.privateKey,
      },
    ]);
  };

  const verifyWallet = (phrase, pw) => {
    if (phrase.trim() === props.mnemonic) {
      const key = pw;
      const m = phrase;

      setupWallet();

      const encrypted = AES.encrypt(
        JSON.stringify({ m }),
        key.trim()
      ).toString();
      localStorage.setItem("project_v_w", encrypted);
      props.setVerified(true);
    } else {
      console.log("Please try again.");
    }
  };

  // Import Wallet

  const importWallet = () => {
    setImportWalletState(true);
  };

  const checkMnemonic = (userMnemonic, userPw) => {
    props.setMnemonic(userMnemonic.trim());
    const key = userPw.trim();
    const m = userMnemonic.trim();

    const encrypted = AES.encrypt(JSON.stringify({ m }), key).toString();
    localStorage.setItem("project_v_w", encrypted);
    setupWallet(userMnemonic);
    props.setVerified(true);
  };

  const importWalletData = {
    open: importWalletState,
    close: handleClose,
    onClick: checkMnemonic,
  };

  if (props.verified) {
    return <Redirect to="/wallet" />;
  } else {
    return (
      <>
        <Container className={style.homeContainer}>
          <Grid container>
            <Grid item sm={8}>
              <h1>Fantom Wallet</h1>
              <p>the clean one</p>
            </Grid>
          </Grid>

          {/* Button section */}
          <div className={style.buttonSection}>
            <Grid container spacing={3}>
              <Grid item sm={4}>
                <FancyButton
                  title="Create Wallet"
                  desc="Create a crypto wallet"
                  color="violet"
                  icon="create"
                  onClick={createWallet}
                />
              </Grid>
              <Grid item sm={4}>
                <FancyButton
                  title="Import Wallet"
                  desc="Restore your existing wallet"
                  color="orange"
                  icon="import"
                  onClick={importWallet}
                />
              </Grid>
            </Grid>
          </div>
        </Container>

        {/* Modals */}
        {/* CreateWallet Section */}
        <CreateWalletModal
          open={createWalletState}
          onClose={handleClose}
          mnemonic={props.mnemonic}
          nextModal={openVerificationModal}
          tooltip={tooltip}
          setTooltip={setTooltip}
        />

        {/* Verify Modal */}
        <VerifyWalletModal
          open={verificationModalState}
          onClose={handleClose}
          prevModal={openSeedPhraseModal}
          onClick={verifyWallet}
          accVerified={props.verified}
        />

        {/* Import Wallet Section */}
        <ImportWallet data={importWalletData} />
      </>
    );
  }
};
