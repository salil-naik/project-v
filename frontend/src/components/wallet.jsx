
import { useState, useEffect } from 'react';
import { ethers } from "ethers";
import axios from 'axios';

// Need to add edge case for Mneumonic string

const VerifyWallet = (props) => {

    const checkMnemonic = () => {
        if(document.getElementById('verify-mnemonic').value === props.mnemonic) {
            console.log("Verified!")
            props.setupWallet();
            props.setVerified(true);
        }
        else {
            console.log("Please try again.");
        }
    }

    return(
        <div>
            <div> Please verify your wallet Mneumonic : </div>
            <input id="verify-mnemonic" type="text" />
            <button onClick={checkMnemonic}> Verify </button>
        </div>
    )
}

const WalletAddresses = (props) => {

    console.log(props);

    return(
        <div> 
        <table> 
            <thead> 
            <tr>
            <th> Private Key </th>
            <th> Public Key </th>
            </tr>
            </thead>
            <tbody> 
            {
                props.address.map((element,index) => {
                    return (
                        <tr key={index}>
                            <th> {element.privateKey} </th>
                            <th> {element.address}</th>

                        </tr>
                        )
                })
            }
            </tbody>

        </table>
        <table> 
        <thead> 
            <tr>
            <th> Token </th>
            <th> Balance </th>
            </tr>
            </thead>
            <tbody> 
                {
                    props.balances.map(element => {
                        return(
                            <tr>
                            <th> {element.contract_ticker_symbol} </th>
                            <th> {((element.balance) / Math.pow(10, element.contract_decimals))} </th>
                            </tr>
                        )
                    })
                }
            </tbody>
        </table>
        </div>
    )
}

const Transaction = (props) => {

    console.log(props.network);

    // Network By default is Kovan
    let networkChosen = props.network;
    

    const provider = new ethers.providers.JsonRpcProvider(networkChosen);
    const signer = provider.getSigner()


    const sendEth = async () => {
        const walletPrivateKey = new ethers.Wallet(props.address[0].privateKey);

        console.log(walletPrivateKey);

        const wallet = walletPrivateKey.connect(provider)

        console.log(wallet);

        let sendAddressInput = document.getElementById('send-address-input').value;
        let sendTokenInput = document.getElementById('send-token-input').value;

        let tx = {
            to: sendAddressInput,
            value: ethers.utils.parseEther(sendTokenInput)
          }
          
          // Signing a transaction
          await wallet.sendTransaction(tx)
          .then(result => {
              console.log(result);
          })
    }

    return(
        <div>
            <input id="send-token-input" placeholder="1 ETH" required/>
            <input id="send-address-input" placeholder="0xbbbaaD77908e7143B6b4D543abefd08568f63" required/>
            <button onClick={sendEth}> Send </button>
        </div>
    )
}


function Wallet(props) {

    const [mnemonic, setMnemonic] = useState(null);
    const [address, setAddress] = useState([]);
    const [verified, setVerified] = useState(false);
    const [selectedAddress, SetSelectedAddress] = useState();
    // Default is Kovan
    const [network, SetNetwork] = useState(props.network.kovan.rpc);
    const [balances, setBalances] = useState([]);


    const createWallet = () => {
        const wallet = ethers.Wallet.createRandom();
        setMnemonic(wallet.mnemonic.phrase);
    }
    
    const setupWallet = () => {
        // To fetch first address generated by Mneumonic 
        const walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/0`);

        setAddress(arr => [...arr, {
            address : walletMnemonic.address,
            privateKey : walletMnemonic.privateKey
        }])

    }

    const addNewAddress = () => {

        const number = address.length;
        const walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/${number}`);

        setAddress(arr => [...arr, {
            address : walletMnemonic.address,
            privateKey : walletMnemonic.privateKey
        }])

        getBalance();
    }

    const getBalance = () => {
        let networkChosen = props.network;
    
        const provider = new ethers.providers.JsonRpcProvider(networkChosen);
    
        axios.get(`https://Project-v-backend.vishnuduttk.repl.co/address?address=${address[0].address}`)
            .then(result => {
                console.log(result.data.data);
                setBalances(result.data.data.items)
            })
    
    }

    const changeNetwork = (input) => {
        switch(input) {
            case "kovan":
                SetNetwork(props.network.kovan.rpc)
                break;

            case "ethereum":
                SetNetwork(props.network.ethereumMainnet.rpc)
                break;
            
            case "fantom-testnet":
                SetNetwork(props.network.fantomTestnet.rpc)
                break;

            case "fantom-mainnet":
                SetNetwork(props.network.fantomMainnet.rpc)
                break;
        }
    }

    return(
        <div>

            <div style={{display: "flex", justifyContent : "flex-end"}}>
                <label htmlFor="network">Choose a network:</label> 

                <select defaultValue="kovan" name="network" id="network-connected" onChange={(e) => changeNetwork(e.target.value)}>
                <option value="kovan">Kovan</option>
                <option value="ethereum">Etheruem Mainnet</option>
                <option value="fantom-testnet">Fantom Testnet</option>
                <option value="fantom-mainnet">Fantom Mainnet</option>
                </select>
            </div>

            <button onClick={createWallet}> Create Wallet </button> 

            <p> Wallet Seed Phrase : {mnemonic} </p>

            <VerifyWallet mnemonic={mnemonic} setupWallet={setupWallet} setVerified={setVerified}/>

            {
                verified ? 
                <div>
                    <WalletAddresses network={props.network.kovan.rpc} address={address} balances={balances}/>
                    <button onClick={addNewAddress}> Add new address </button>
                </div>

                : <div> Not Verified </div>
            }
            
            <Transaction network={network} address={address}/>

        </div>
    )
} 

export default Wallet;