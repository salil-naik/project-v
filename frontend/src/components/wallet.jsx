
import { useState, useEffect } from 'react';
import { ethers } from "ethers";

// Need to add edge case for Mneumonic string

const VerifyWallet = (props) => {

    const checkMnemonic = () => {
        if(document.getElementById('verify-mnemonic').value === props.mnemonic) {
            console.log("Verified!")
            props.setupWallet();
            props.setVerified(true);
        }
        else {
            console.log("Please try again.");
        }
    }

    return(
        <div>
            <div> Please verify your wallet Mneumonic : </div>
            <input id="verify-mnemonic" type="text" />
            <button onClick={checkMnemonic}> Verify </button>
        </div>
    )
}

const WalletAddresses = (props) => {

    return(
        <table> 
            <tr>
            <th> Private Key </th>
            <th> Public Key </th>
            </tr>
            {
                props.address.map((element,index) => {
                    return (
                        <tr key={index}>
                            <th> {element.privateKey} </th>
                            <th> {element.address}</th>

                        </tr>
                        )
                })
            }

        </table>
    )
}

const Transaction = (props) => {

    const provider = new ethers.providers.JsonRpcProvider(props.network);
    const signer = provider.getSigner()


    const sendEth = async () => {
        const walletPrivateKey = new ethers.Wallet(props.address[0].privateKey);

        console.log(walletPrivateKey);

        const wallet = walletPrivateKey.connect(provider)

        console.log(wallet);


        let tx = {
            to: "0xbbbaaD77908e7143B6b4D5922fd201cd08568f63",
            value: ethers.utils.parseEther("1.0")
          }
          
          // Signing a transaction
          await wallet.sendTransaction(tx)
          .then(result => {
              console.log(result);
          })
    }

    return(
        <div> 
            <button onClick={sendEth}> Send 1 eth </button>
        </div>
    )
}


function Wallet(props) {

    const [mnemonic, setMnemonic] = useState(null);
    const [address, setAddress] = useState([]);
    const [verified, setVerified] = useState(false);
    const [selectedAddress, SetSelectedAddress] = useState();

    const createWallet = () => {
        const wallet = ethers.Wallet.createRandom();
        setMnemonic(wallet.mnemonic.phrase);
        // console.log("Wallet Mneumonic", wallet.mnemonic.phrase);
    }
    
    const setupWallet = () => {
        // To fetch first address generated by Mneumonic 
        const walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/0`);

        setAddress(arr => [...arr, {
            address : walletMnemonic.address,
            privateKey : walletMnemonic.privateKey
        }])
    }

    const addNewAddress = () => {

        const number = address.length;
        const walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/${number}`);

        setAddress(arr => [...arr, {
            address : walletMnemonic.address,
            privateKey : walletMnemonic.privateKey
        }])
    }

    return(
        <div>
            <button onClick={createWallet}> Create Wallet </button> 

            <p> Wallet Seed Phrase : {mnemonic} </p>

            <VerifyWallet mnemonic={mnemonic} setupWallet={setupWallet} setVerified={setVerified}/>

            {
                verified ? 
                <div>
                    <WalletAddresses address={address}/>
                    <button onClick={addNewAddress}> Add new address </button>
                </div>

                : <div> Not Verified </div>
            }
            
            <Transaction network={props.network} address={address}/>

        </div>
    )
} 

export default Wallet;