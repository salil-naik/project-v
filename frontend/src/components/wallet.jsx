
import { useState, useEffect } from 'react';
import { ethers } from "ethers";
import axios from 'axios';

import Search from './search'
import UserWallet from './userWallet.jsx';

import Profile from './Profile';

import "../css/wallet.css"

import {
    BrowserRouter as Router,
    Switch,
    Route,
    Link,
    useHistory
} from "react-router-dom";



// Need to add edge case for Mneumonic string

const VerifyWallet = (props) => {

    const checkMnemonic = () => {
        if (document.getElementById('verify-mnemonic').value === props.mnemonic) {
            console.log("Verified!")
            props.setupWallet();
            props.setVerified(true);
        }
        else {
            console.log("Please try again.");
        }
    }

    return (
        <div>
            <div> Please verify your wallet Mneumonic : </div>
            <input id="verify-mnemonic" type="text" />
            <button >
                <Link onClick={checkMnemonic} to="/wallet"> Verify </Link>
            </button>
        </div>
    )
}


function Wallet(props) {

    const history = useHistory();

    const [mnemonic, setMnemonic] = useState(null);
    const [address, setAddress] = useState([]);
    const [verified, setVerified] = useState(false);
    const [selectedAddress, SetSelectedAddress] = useState();
    // Default is Kovan
    const [network, SetNetwork] = useState(props.network.kovan.rpc);
    const [balances, setBalances] = useState([]);
    const [searchAddress, setSearchAddress] = useState('');

    const createWallet = () => {
        const wallet = ethers.Wallet.createRandom();
        setMnemonic(wallet.mnemonic.phrase);

        const modal = document.getElementsByClassName('create-wallet-modal')[0];
        modal.style.display = "grid";
        modal.style.justifyContent = "center";
        modal.style.justifyContent = "center";
    }

    const setupWallet = () => {
        // To fetch first address generated by Mneumonic 
        const walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/0`);

        setAddress(arr => [...arr, {
            address: walletMnemonic.address,
            privateKey: walletMnemonic.privateKey
        }])

    }

    const addNewAddress = () => {

        const number = address.length;
        const walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/${number}`);

        setAddress(arr => [...arr, {
            address: walletMnemonic.address,
            privateKey: walletMnemonic.privateKey
        }])

        getBalance();
    }

    const getBalance = () => {
        let networkChosen = props.network;

        const provider = new ethers.providers.JsonRpcProvider(networkChosen);

        axios.get(`https://Project-v-backend.vishnuduttk.repl.co/address?address=${address[0].address}`)
            .then(result => {
                console.log(result.data.data);
                setBalances(result.data.data.items)
            })

    }

    const changeNetwork = (input) => {
        switch (input) {
            case "kovan":
                SetNetwork(props.network.kovan.rpc)
                break;

            case "ethereum":
                SetNetwork(props.network.ethereumMainnet.rpc)
                break;

            case "fantom-testnet":
                SetNetwork(props.network.fantomTestnet.rpc)
                break;

            case "fantom-mainnet":
                SetNetwork(props.network.fantomMainnet.rpc)
                break;
        }
    }

    const searchHandler = (e) => {
        // e.preventDefault();
        
        history.push(`/address/${searchAddress}`);
    }
    const getSearchAddress = (e) => {
        setSearchAddress(e.target.value);
    }

    return (
        <Router>
            <Switch>
                <Route path="/" exact>
                    <form onSubmit={searchHandler}>
                    <input type="text" placeholder="Enter Address Here" style={{ width: "100vw", textAlign: "center" }} name="address" onChange={getSearchAddress} />

                    </form><button onClick={searchHandler}>Search</button>
                                        {/* <Link to={`/address/${searchAddress}`}><button>Search</button></Link> */}

                    <br />
                    <br />
                    <button onClick={createWallet}> Create Wallet </button>

                    <div className="create-wallet-modal">

                        <p> Wallet Seed Phrase : {mnemonic} </p>

                        <VerifyWallet mnemonic={mnemonic} setupWallet={setupWallet} setVerified={setVerified} />

                    </div>
                </Route>

                <Route path="/wallet">
                    <UserWallet changeNetwork={changeNetwork} verified={verified} network={props.network.kovan.rpc} address={address} balances={balances} addNewAddress={addNewAddress} />
                </Route>
                <Route path="/address/:address" component={Profile} />

            </Switch>
        </Router>
    )
}

export default Wallet;